#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const fs = require('fs');
const app = require('../app');
const dao = require('../dao/main');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server, and attach event listeners.
 */

const server = http.createServer(app);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Attempt to connect to database and sync data models, and then listen on provided port, on all network interfaces.
 */

dao
    .syncModels(false)
    .then(function () {
        console.info(`[${new Date(Date.now()).toUTCString()}] - DAO Info: Data Access Models successfully synced`);

        server.listen(port);
    })
    .catch(function (err) {
        console.error(`[${new Date(Date.now()).toUTCString()}] - DAO ${err.name}: ${err.message}`);
        process.exit(1);
    });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    switch (error.code) {
        case 'EACCES':
            console.error(`[${new Date(Date.now()).toUTCString()}] - HTTP server Error: ${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`[${new Date(Date.now()).toUTCString()}] - HTTP server Error: ${bind} is occupied by another application`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `Pipe ${addr}`
        : `Port ${addr.port} at ${addr.address}`;

    console.info(`[${new Date(Date.now()).toUTCString()}] - HTTP server Info: Listening on ${bind}`);
}

/**
 * Event listener for Node runtime "SIGINT" event.
 */

process.on('SIGINT', function() {
    fs.rm(process.env.TEMP_FILES_PATH, { maxRetries: 3, recursive: true }, function (err) {
        if (err && err.code === 'ENOENT') {
            console.info(
                `[${new Date(Date.now()).toUTCString()}] - FileSys Info: Deletion of temporary folder was skipped`
            );
            process.exit(0);
        } else if (err) {
            console.error(
                `[${new Date(Date.now()).toUTCString()}] - FileSys Error: Failed to delete temporary folder`
            );
            process.exit(1);
        } else {
            console.info(
                `[${new Date(Date.now()).toUTCString()}] - FileSys Info: Temporary folder has been deleted`
            );
            process.exit(0);
        }
    });
});
